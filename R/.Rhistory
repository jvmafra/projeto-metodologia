select(-std.error, -p.value)
tidy(model.encontros, conf.int = TRUE) %>%
select(-std.error, -p.value)
glance(multi)
tidy(model.encontros, conf.int = TRUE) %>%
select(-std.error, -p.value)
glance(model.encontros)
tidy(model.encontros, conf.int = TRUE) %>%
select(-std.error, -p.value)
glance(model.encontros)
glance(model.encontros) %>%
select(p.value)
glance(model.encontros)
glance(model.encontros)
glance(model.encontros) %>% select(r.squared) %>% mutate(r.squared = round(r.squared *100, 2)
)
install.packages("datatable")
install.packages("DT")
library(DT)
library(DT)
datatable(tidy(model.encontros, conf.int = TRUE) %>%
select(-std.error, -p.value))
?datatable
datatable(glance(model.encontros), class = 'cell-border stripe', pageLength = 5,)
datatable(glance(model.encontros), class = 'cell-border stripe', pageLength = 5)
datatable(glance(model.encontros), class = 'cell-border stripe', pageLength = 5)
datatable(glance(model.encontros), class = 'cell-border stripe', options = list(pageLength = 5)))
datatable(glance(model.encontros), class = 'cell-border stripe', options = list(pageLength = 5))
datatable(glance(model.encontros), class = 'cell-border stripe', options = list(pageLength = 10))
datatable(glance(model.encontros), class = 'cell-border stripe', options = list(columnDefs = list(list(className = 'dt-center', targets = 5))))
datatable(glance(model.encontros), class = 'cell-border stripe')
datatable(glance(model.encontros) %>% select(r.squared, adj.r.squared, sigma, statistic, p.value), class = 'cell-border stripe')
encontros_augmented %>%
ggplot(aes(x = fun)) +
geom_jitter(aes(y = resid), alpha = .5)
encontros_augmented %>%
ggplot(aes(x = fun)) +
geom_jitter(aes(y = resid), alpha = .5)
encontros_augmented %>%
ggplot(aes(x = fun)) +
geom_jitter(aes(y = resid), alpha = .5)
encontros_augmented %>%
ggplot(aes(x = fun)) +
geom_jitter(aes(y = resid), alpha = .5)
datatable(tidy(model.encontros, conf.int = TRUE) %>%
select(-std.error, -p.value), class = 'cell-border stripe')
para_plotar_modelo = encontros %>%
data_grid(shar = seq_range(shar, 10), # Crie um vetor de 10 valores no range de TV2
attr = seq_range(attr, 4), # Vetor de 4 valores no range de Radio
fun = seq_range(fun, 3)) %>%
add_predictions(model.encontros)
glimpse(para_plotar_modelo)
para_plotar_modelo %>%
ggplot(aes(x = shar, y = pred)) +
geom_line(aes(group = attr, colour = attr)) +
facet_grid(. ~ fun)
para_plotar_modelo %>%
ggplot(aes(x = shar, y = pred)) +
geom_line(aes(group = attr, colour = attr)) +
facet_grid(. ~ fun)
model_plot = encontros %>%
data_grid(shar = seq_range(shar, 10), # Crie um vetor de 10 valores no range de TV2
attr = seq_range(attr, 4), # Vetor de 4 valores no range de Radio
fun = seq_range(fun, 3)) %>%
add_predictions(model.encontros)
model_plot %>%
ggplot(aes(x = shar, y = pred)) +
geom_line(aes(group = attr, colour = attr)) +
facet_grid(. ~ fun)
model_plot = encontros %>%
data_grid(shar = seq_range(shar, 10), # Crie um vetor de 10 valores no range de TV2
attr = seq_range(attr, 5), # Vetor de 4 valores no range de Radio
fun = seq_range(fun, 3)) %>%
add_predictions(model.encontros)
model_plot %>%
ggplot(aes(x = shar, y = pred)) +
geom_line(aes(group = attr, colour = attr)) +
facet_grid(. ~ fun)
model_plot = encontros %>%
data_grid(shar = seq_range(shar, 10), # Crie um vetor de 10 valores no range de TV2
attr = seq_range(attr, 4), # Vetor de 4 valores no range de Radio
fun = seq_range(fun, 3)) %>%
add_predictions(model.encontros)
encontros_augmented %>%
ggplot(aes(x = like)) +
geom_jitter(aes(y = resid), alpha = .5)
encontros_augmented %>%
ggplot(aes(x = like)) +
geom_jitter(aes(y = pred), alpha = .5)
encontros_augmented %>%
ggplot(aes(x = attr)) +
geom_line(aes(y = pred), size = 2, colour = "blue") +
geom_jitter(aes(y = like), alpha = .5)
encontros_augmented %>%
ggplot(aes(x = attr)) +
geom_line(aes(y = pred), size = 2, colour = "blue")
encontros_augmented %>%
ggplot(aes(x = attr)) +
geom_vline(aes(y = pred), size = 2, colour = "blue")
encontros_gender <- encontros %>%
mutate(gen = if_else(gender == 0, "Mulher", "Homem"))
encontros_gender <- speed_dating %>%
select(gender, attr, like) %>%
mutate(gen = if_else(gender == 0, "Mulher", "Homem"))
View(encontros_gender)
encontros_gender <- speed_dating %>%
select(gender, attr, like) %>%
mutate(gen = if_else(gender == 0, "Mulher", "Homem")) %>%
na.omit()
View(encontros_gender)
encontros_gender <- speed_dating %>%
select(gender, attr, like) %>%
mutate(gen = if_else(gender == 0, TRUE, FALSE)) %>%
na.omit()
model.gender.encontros <- lm(like ~ gen + attr, data = encontros_gender)
model.gender.augment = encontros_gender %>%
data_grid(gen, attr) %>%
add_predictions(mlm)
model.gender.augment = encontros_gender %>%
data_grid(gen, attr) %>%
add_predictions(model.gender.encontros)
View(model.gender.augment)
tidy(model.gender.encontros)
model.gender.encontros <- lm(like ~ gen * attr, data = encontros_gender)
tidy(model.gender.encontros)
model.gender.augment = encontros_gender %>%
add_predictions(model.gender.encontros)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = pred), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment%>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment = encontros_gender %>%
add_predictions(model.gender.encontros) %>%
add_residuals(model.gender.encontros)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .05)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_jitter(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_count(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_count(aes(y = pred), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_count(aes(y = resid), alpha = .5)
tidy(mlm, conf.int = T)
tidy(model.gender.encontros, conf.int = T)
tidy(model.gender.encontros)
tidy(model.gender.encontros, conf.int = T)
datatable(tidy(model.gender.encontros, conf.int = TRUE) %>%
select(-std.error, -p.value), class = 'cell-border stripe'))
datatable(tidy(model.gender.encontros, conf.int = TRUE) %>%
select(-std.error, -p.value), class = 'cell-border stripe'))
datatable(tidy(model.encontros, conf.int = TRUE) %>%
select(-std.error, -p.value), class = 'cell-border stripe'))
datatable(tidy(model.gender.encontros, conf.int = TRUE) %>%
select(-std.error, -p.value), class = 'cell-border stripe')
datatable(glance(model.encontros) %>% select(r.squared, adj.r.squared, sigma, statistic, p.value), class = 'cell-border stripe')
datatable(glance(model.gender.encontros) %>% select(r.squared, adj.r.squared, sigma, statistic, p.value), class = 'cell-border stripe')
model.gender.augment %>%
ggplot(aes(x  = attr, colour = gen)) +
geom_line(y = pred) +
facet_grid(. ~ gen)
model.gender.augment %>%
ggplot(aes(x  = attr, colour = gen)) +
geom_line(y = pred) +
facet_grid(. ~ gen)
model.gender.augment %>%
ggplot(aes(x  = attr, colour = gen)) +
geom_line(y = pred) +
facet_grid(. ~ gen)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_count(aes(y = pred), alpha = .5)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_count(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x  = attr, colour = gen)) +
geom_line(y = resid) +
facet_grid(. ~ gen)
model.gender.augment = encontros_gender %>%
add_predictions(model.gender.encontros) %>%
add_residuals(model.gender.encontros)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_count(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x  = attr, colour = gen)) +
geom_line(y = resid) +
facet_grid(. ~ gen)
model.gender.augment %>%
ggplot(aes(x = attr)) +
geom_count(aes(y = resid), alpha = .5)
model.gender.augment %>%
ggplot(aes(x  = attr, colour = gen)) +
geom_line(aes(y = resid)) +
facet_grid(. ~ gen)
experimento %>%
filter(tempo < 200000000) %>%
ggplot(aes(x = dataset, y = tempo, color = as.factor(range))) +
geom_jitter(alpha = .4) +
geom_boxplot(outlier.fill = "") +
facet_grid(. ~ algoritmo) +
labs(x = "Conjunto de dados", y = "Tempo (microssegundos)", color = "Range")
experimento %>%
filter(tempo < 200000000) %>%
ggplot(aes(x = dataset, y = tempo, color = as.factor(range))) +
geom_jitter(alpha = .4) +
geom_boxplot(outlier.shape = "") +
facet_grid(. ~ algoritmo) +
labs(x = "Conjunto de dados", y = "Tempo (microssegundos)", color = "Range")
library(dplyr)
library(readr)
library(ggplot2)
library(stringr)
theme_set(theme_bw())
options(scipen = 999)
experimento <- read_csv("exec_comp_micros.txt", col_names = FALSE) %>%
rename("algoritmo" = X1, "tempo" = X2, "dataset" = X3) %>%
mutate(dataset = str_sub(dataset, 10)) %>%
mutate(range = as.numeric(str_extract(dataset, "[0-9]+"))) %>%
mutate(dataset = str_extract(dataset, "[aA-zZ]+")) %>%
mutate(dataset = gsub("_r","", dataset)) %>%
select(algoritmo, dataset, range, tempo)
View(experimento)
setwd("~/workspace/projeto-metodologia/R")
experimento %>%
ggplot(aes(x = dataset, y = tempo, color = as.factor(range))) +
geom_jitter(alpha = .5) +
facet_grid(. ~ algoritmo) +
labs(x = "Conjunto de dados", y = "Tempo (microssegundos)", color = "Range") +
ggsave("grafico1.png")
# não sei se usaremos
experimento %>%
ggplot(aes(x = tempo)) +
geom_histogram()
# não sei se usaremos
experimento %>%
ggplot(aes(x = tempo)) +
geom_histogram() +
ggsave("grafico2.png")
# não sei se usaremos
experimento %>%
ggplot(aes(x = tempo)) +
geom_histogram() +
ggsave("grafico2.png")
# não sei se usaremos
experimento %>%
ggplot(aes(x = tempo)) +
geom_histogram() +
labs(x = "Tempo (microssegundos)", y = "Número de ocorrências")
ggsave("grafico2.png")
experimento %>%
filter(tempo < 200000000) %>%
ggplot(aes(x = dataset, y = tempo, color = as.factor(range))) +
geom_jitter(alpha = .4) +
geom_boxplot(outlier.shape = "") +
facet_grid(. ~ algoritmo) +
labs(x = "Conjunto de dados", y = "Tempo (microssegundos)", color = "Range")
experimento %>%
filter(tempo < 200000000) %>%
ggplot(aes(x = dataset, y = tempo, color = as.factor(range))) +
geom_jitter(alpha = .4) +
geom_boxplot(outlier.shape = "") +
facet_grid(. ~ algoritmo) +
labs(x = "Conjunto de dados", y = "Tempo (microssegundos)", color = "Range") +
ggsave("grafico3.png")
experimento %>%
ggplot(aes(x = algoritmo, y = tempo)) +
geom_boxplot() +
facet_wrap(~ dataset, scales = "free_y") +
labs(x = "", y = "Tempo (microssegundos)")
experimento %>%
ggplot(aes(x = range, y = tempo)) +
geom_boxplot() +
facet_wrap(~ dataset, scales = "free_y") +
labs(x = "", y = "Tempo (microssegundos)")
experimento %>%
ggplot(aes(x = algoritmo, y = tempo)) +
geom_boxplot() +
facet_wrap(~ range, scales = "free_y") +
labs(x = "", y = "Tempo (microssegundos)")
experimento %>%
filter(algoritmo != "insertion")
ggplot(aes(x = algoritmo, y = tempo)) +
geom_boxplot() +
facet_wrap(~ range, scales = "free_y") +
labs(x = "", y = "Tempo (microssegundos)")
experimento %>%
filter(algoritmo != "insertion") %>%
ggplot(aes(x = algoritmo, y = tempo)) +
geom_boxplot() +
facet_wrap(~ range, scales = "free_y") +
labs(x = "", y = "Tempo (microssegundos)")
experimento %>%
#filter(algoritmo != "insertion") %>%
ggplot(aes(x = algoritmo, y = tempo)) +
geom_boxplot() +
scale_y_log10() +
facet_wrap(~ range, scales = "free_y") +
labs(x = "", y = "Tempo (microssegundos)")
experimento %>%
#filter(algoritmo != "insertion") %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot() +
scale_y_log10() +
facet_wrap(~ range, scales = "free_y") +
labs(x = "", y = "Tempo (microssegundos)")
experimento %>%
#filter(algoritmo != "insertion") %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
scale_y_log10() +
facet_wrap(~ range, scales = "free_y") +
labs(x = "", y = "Tempo (microssegundos)")
experimento %>%
#filter(algoritmo != "insertion") %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
scale_y_log10() +
facet_wrap(~ range) +
labs(x = "", y = "Tempo (microssegundos)")
experimento %>%
#filter(algoritmo != "insertion") %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
scale_y_log10() +
facet_wrap(~ range) +
labs(x = "", y = "Tempo (microssegundos)") +
ggsave("grafico4.png")
experimento %>%
#filter(algoritmo != "insertion") %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
#scale_y_log10() +
facet_wrap(~ range) +
labs(x = "", y = "Tempo (microssegundos)")
#ggsave("grafico4.png")
experimento %>%
filter(algoritmo != "insertion") %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
#scale_y_log10() +
facet_wrap(~ range) +
labs(x = "", y = "Tempo (microssegundos)")
#ggsave("grafico4.png")
experimento %>%
#filter(algoritmo != "insertion") %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
scale_y_log10() +
facet_wrap(~ dataset) +
labs(x = "", y = "Tempo (microssegundos)")
#ggsave("grafico4.png")
experimento %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
scale_y_log10() +
facet_wrap(~ dataset) +
labs(x = "", y = "Tempo (microssegundos)") +
ggsave("grafico4.png")
experimento %>%
filter(algoritmo != "insertion") %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
#scale_y_log10() +
facet_wrap(~ range) +
labs(x = "", y = "Tempo (microssegundos)") +
ggsave("grafico4.png")
experimento %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
scale_y_log10() +
facet_wrap(~ dataset) +
labs(x = "", y = "Tempo (microssegundos)") +
ggsave("grafico5.png")
experimento %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
scale_y_log10()
labs(x = "", y = "Tempo (microssegundos)") +
ggsave("grafico6.png")
experimento %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
scale_y_log10() +
labs(x = "", y = "Tempo (microssegundos)") +
ggsave("grafico6.png")
experimento %>%
filter(algoritmo != "insertion") %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
#scale_y_log10() +
facet_wrap(~ range) +
labs(x = "", y = "Tempo (microssegundos)") +
ggsave("grafico4.png")
experimento %>%
filter(algoritmo != "insertion") %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
#scale_y_log10() +
facet_wrap(~ range) +
labs(x = "", y = "Tempo em microssegundos (log)") +
ggsave("grafico4.png")
experimento %>%
#filter(algoritmo != "insertion") %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
#scale_y_log10() +
facet_wrap(~ range) +
labs(x = "", y = "Tempo em microssegundos (log)") +
ggsave("grafico4.png")
experimento %>%
#filter(algoritmo != "insertion") %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
scale_y_log10() +
facet_wrap(~ range) +
labs(x = "", y = "Tempo em microssegundos (log)") +
ggsave("grafico4.png")
experimento %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
scale_y_log10() +
facet_wrap(~ dataset) +
labs(x = "", y = "Tempo em microssegundos (log)") +
ggsave("grafico5.png")
experimento %>%
ggplot(aes(x = algoritmo, y = tempo, color= algoritmo)) +
geom_boxplot(show.legend = FALSE) +
scale_y_log10() +
labs(x = "", y = "Tempo em microssegundos (log)") +
ggsave("grafico6.png")
fit <- aov(y ~ Algoritmo, data=experimento)
fit <- aov(tempo ~ Algoritmo, data=experimento)
fit <- aov(tempo ~ algoritmo, data=experimento)
layout(matrix(c(1,2,3,4),2,2)) # optional layout
plot(fit) # diagnostic plots
plot(fit) # diagnostic plots
